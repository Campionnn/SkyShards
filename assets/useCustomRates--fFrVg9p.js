var N=Object.defineProperty,j=Object.defineProperties;var E=Object.getOwnPropertyDescriptors;var T=Object.getOwnPropertySymbols;var I=Object.prototype.hasOwnProperty,L=Object.prototype.propertyIsEnumerable;var C=(a,t,e)=>t in a?N(a,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):a[t]=e,h=(a,t)=>{for(var e in t||(t={}))I.call(t,e)&&C(a,e,t[e]);if(T)for(var e of T(t))L.call(t,e)&&C(a,e,t[e]);return a},S=(a,t)=>j(a,E(t));var f=(a,t,e)=>C(a,typeof t!="symbol"?t+"":t,e);var d=(a,t,e)=>new Promise((s,o)=>{var n=r=>{try{m(e.next(r))}catch(c){o(c)}},y=r=>{try{m(e.throw(r))}catch(c){o(c)}},m=r=>r.done?s(r.value):Promise.resolve(r.value).then(n,y);m((e=e.apply(a,t)).next())});import{r as w}from"./vendor-e8ACzjHW.js";const u=class u{constructor(){f(this,"shardsCache",null);f(this,"shardNameToKeyCache",null);f(this,"defaultRatesCache",null)}static getInstance(){return u.instance||(u.instance=new u),u.instance}loadShards(){return d(this,null,function*(){if(this.shardsCache)return this.shardsCache;try{const e=yield fetch("/SkyShards/fusion-data.json");if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const s=yield e.json(),o=yield this.loadDefaultRates();return this.shardsCache=Object.entries(s.shards).map(([n,y])=>S(h({key:n},y),{id:n,rate:o[n]||0})),this.shardsCache}catch(t){throw console.error("Failed to load shards:",t),new Error(`Failed to load shards: ${t}`)}})}getShardNameToKeyMap(){return d(this,null,function*(){if(this.shardNameToKeyCache)return this.shardNameToKeyCache;const t=yield this.loadShards();return this.shardNameToKeyCache=t.reduce((e,s)=>(e[s.name.toLowerCase()]=s.key,e),{}),this.shardNameToKeyCache})}loadDefaultRates(){return d(this,null,function*(){if(this.defaultRatesCache)return this.defaultRatesCache;try{const t=yield fetch("/SkyShards/rates.json");return this.defaultRatesCache=yield t.json(),this.defaultRatesCache}catch(t){throw new Error(`Failed to load default rates: ${t}`)}})}searchShards(t){return d(this,null,function*(){const e=yield this.loadShards(),s=t.toLowerCase();return e.filter(o=>o.name.toLowerCase().includes(s))})}getShardByKey(t){return d(this,null,function*(){return(yield this.loadShards()).find(s=>s.key===t)})}getShardByName(t){return d(this,null,function*(){const s=(yield this.getShardNameToKeyMap())[t.toLowerCase()];if(s)return this.getShardByKey(s)})}};f(u,"instance");let g=u;const F=()=>{const[a,t]=w.useState({}),[e,s]=w.useState({}),[o,n]=w.useState(!0);return w.useEffect(()=>{d(null,null,function*(){try{n(!0);const i=yield g.getInstance().loadDefaultRates();s(i);const R=localStorage.getItem("customRates");if(R)try{const l=JSON.parse(R);t(h(h({},i),l))}catch(l){t(h({},i))}else t(h({},i))}catch(c){console.error("Failed to load rates:",c),t({}),s({})}finally{n(!1)}})},[]),{customRates:a,defaultRates:e,loading:o,updateRate:(r,c)=>{const i=S(h({},a),{[r]:c});t(i);const R=Object.entries(i).reduce((l,[p,K])=>(K!==e[p]&&(l[p]=K),l),{});localStorage.setItem("customRates",JSON.stringify(R))},resetRates:()=>{t(h({},e)),localStorage.removeItem("customRates")}}};export{g as D,F as u};
