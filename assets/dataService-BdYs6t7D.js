var S=Object.defineProperty,K=Object.defineProperties;var T=Object.getOwnPropertyDescriptors;var w=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,N=Object.prototype.propertyIsEnumerable;var y=(s,a,e)=>a in s?S(s,a,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[a]=e,f=(s,a)=>{for(var e in a||(a={}))p.call(a,e)&&y(s,e,a[e]);if(w)for(var e of w(a))N.call(a,e)&&y(s,e,a[e]);return s},C=(s,a)=>K(s,T(a));var c=(s,a,e)=>y(s,typeof a!="symbol"?a+"":a,e);var h=(s,a,e)=>new Promise((t,n)=>{var d=r=>{try{l(e.next(r))}catch(u){n(u)}},i=r=>{try{l(e.throw(r))}catch(u){n(u)}},l=r=>r.done?t(r.value):Promise.resolve(r.value).then(d,i);l((e=e.apply(s,a)).next())});const o=class o{constructor(){c(this,"shardsCache",null);c(this,"shardNameToKeyCache",null);c(this,"defaultRatesCache",null)}static getInstance(){return o.instance||(o.instance=new o),o.instance}loadShards(){return h(this,null,function*(){if(this.shardsCache)return this.shardsCache;try{const e=yield fetch("/SkyShards/fusion-data.json");if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const t=yield e.json(),n=yield this.loadDefaultRates();return this.shardsCache=Object.entries(t.shards).map(([d,i])=>C(f({key:d},i),{id:d,rate:n[d]||0})),this.shardsCache}catch(a){throw console.error("Failed to load shards:",a),new Error(`Failed to load shards: ${a}`)}})}getShardNameToKeyMap(){return h(this,null,function*(){if(this.shardNameToKeyCache)return this.shardNameToKeyCache;const a=yield this.loadShards();return this.shardNameToKeyCache=a.reduce((e,t)=>(e[t.name.toLowerCase()]=t.key,e),{}),this.shardNameToKeyCache})}loadDefaultRates(){return h(this,null,function*(){if(this.defaultRatesCache)return this.defaultRatesCache;try{const a=yield fetch("/SkyShards/rates.json");return this.defaultRatesCache=yield a.json(),this.defaultRatesCache}catch(a){throw new Error(`Failed to load default rates: ${a}`)}})}searchShards(a){return h(this,null,function*(){const e=yield this.loadShards(),t=a.toLowerCase();return e.filter(n=>n.name.toLowerCase().includes(t))})}getShardByKey(a){return h(this,null,function*(){return(yield this.loadShards()).find(t=>t.key===a)})}getShardByName(a){return h(this,null,function*(){const t=(yield this.getShardNameToKeyMap())[a.toLowerCase()];if(t)return this.getShardByKey(t)})}};c(o,"instance");let m=o;export{m as D};
