var N=Object.defineProperty,j=Object.defineProperties;var E=Object.getOwnPropertyDescriptors;var T=Object.getOwnPropertySymbols;var L=Object.prototype.hasOwnProperty,$=Object.prototype.propertyIsEnumerable;var C=(s,e,t)=>e in s?N(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t,i=(s,e)=>{for(var t in e||(e={}))L.call(e,t)&&C(s,t,e[t]);if(T)for(var t of T(e))$.call(e,t)&&C(s,t,e[t]);return s},S=(s,e)=>j(s,E(e));var f=(s,e,t)=>C(s,typeof e!="symbol"?e+"":e,t);var c=(s,e,t)=>new Promise((a,r)=>{var n=o=>{try{y(t.next(o))}catch(h){r(h)}},l=o=>{try{y(t.throw(o))}catch(h){r(h)}},y=o=>o.done?a(o.value):Promise.resolve(o.value).then(n,l);y((t=t.apply(s,e)).next())});import{r as m}from"./vendor-e8ACzjHW.js";const u=class u{constructor(){f(this,"shardsCache",null);f(this,"shardNameToKeyCache",null);f(this,"defaultRatesCache",null);f(this,"recipesCache",null)}static getInstance(){return u.instance||(u.instance=new u),u.instance}loadShards(){return c(this,null,function*(){if(this.shardsCache)return this.shardsCache;try{const t=yield fetch("/SkyShards/fusion-data.json");if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const a=yield t.json(),r=yield this.loadDefaultRates();return this.shardsCache=Object.entries(a.shards).map(([n,l])=>S(i({key:n},l),{id:n,rate:r[n]||0})),this.shardsCache}catch(e){throw console.error("Failed to load shards:",e),new Error(`Failed to load shards: ${e}`)}})}getShardNameToKeyMap(){return c(this,null,function*(){if(this.shardNameToKeyCache)return this.shardNameToKeyCache;const e=yield this.loadShards();return this.shardNameToKeyCache=e.reduce((t,a)=>(t[a.name.toLowerCase()]=a.key,t),{}),this.shardNameToKeyCache})}loadDefaultRates(){return c(this,null,function*(){if(this.defaultRatesCache)return this.defaultRatesCache;try{const e=yield fetch("/SkyShards/rates.json");return this.defaultRatesCache=yield e.json(),this.defaultRatesCache}catch(e){throw new Error(`Failed to load default rates: ${e}`)}})}loadRecipes(){return c(this,null,function*(){if(this.recipesCache)return this.recipesCache;try{const t=yield(yield fetch("/SkyShards/fusion-data.json")).json(),a={};for(const r in t.recipes){a[r]=[];for(const n in t.recipes[r]){const l=parseInt(n);t.recipes[r][n].forEach(o=>{a[r].push({inputs:o,outputQuantity:l})})}}return this.recipesCache=a,a}catch(e){throw new Error(`Failed to load recipes: ${e}`)}})}searchShards(e){return c(this,null,function*(){const t=yield this.loadShards(),a=e.toLowerCase();return t.filter(r=>r.name.toLowerCase().includes(a))})}getShardByKey(e){return c(this,null,function*(){return(yield this.loadShards()).find(a=>a.key===e)})}getShardByName(e){return c(this,null,function*(){const a=(yield this.getShardNameToKeyMap())[e.toLowerCase()];if(a)return this.getShardByKey(a)})}};f(u,"instance");let R=u;const F=()=>{const[s,e]=m.useState({}),[t,a]=m.useState({}),[r,n]=m.useState(!0);return m.useEffect(()=>{c(null,null,function*(){try{n(!0);const d=yield R.getInstance().loadDefaultRates();a(d);const w=localStorage.getItem("customRates");if(w)try{const p=JSON.parse(w);e(i(i({},d),p))}catch(p){e(i({},d))}else e(i({},d))}catch(h){console.error("Failed to load rates:",h),e({}),a({})}finally{n(!1)}})},[]),{customRates:s,defaultRates:t,loading:r,updateRate:(o,h)=>{const d=S(i({},s),{[o]:h});e(d);const w=Object.entries(d).reduce((p,[g,K])=>(K!==t[g]&&(p[g]=K),p),{});localStorage.setItem("customRates",JSON.stringify(w))},resetRates:()=>{e(i({},t)),localStorage.removeItem("customRates")}}};export{R as D,F as u};
